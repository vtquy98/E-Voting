type Election {
  id: ID!
  name: String!
  description: String!
  thumbnail: String!
  electionAddress: String!
  createdAt: Date!
  updatedAt: Date!
  # startedAt: Date!
  state: ElectionState!
  totalVoteCount: Int!
  totalCandidateCount: Int!
  tocalVoterCount: Int!
  shortenCode: Int!
  electionOwner: String!
  votingTime: Int!
}

type ElectionResult {
  userData: User!
  voteCount: Int!
  percentage: Float!
}

enum ElectionState {
  CREATED
  STARTED
  ENDED
}

type Query {
  get_all_election: [Election!]!
  get_election(id: String!): Election!
  get_all_candidates(electionId: String!): [User!]!
  get_all_voters(electionId: String!): [User!]! #review later, maybe i'm wrong
  get_candidate_votes(userId: String!, ElectionAddress: String!): User!
  get_total_votes_count(electionId: String!): Election!
  get_total_candidates_count(ElectionAddress: String!): Election!
  get_total_voters_count(ElectionAddress: String!): Election!
  get_election_result(electionId: String!): [ElectionResult!]!
}

type Mutation {
  create_election(
    name: String
    description: String!
    electionOwner: String!
    thumbnail: String!
    votingTime: Int!
  ): Election!

  add_candidate(
    userId: String!
    description: String!
    ElectionAddress: String!
  ): User!

  add_voter(userId: String!, ElectionAddress: String!): User!
  start_voting(electionId: String!): Election!
  end_voting(ElectionAddress: String!): Election!
  poll_vote(userId: String!, ElectionAddress: String!): User!
  poll_vote2(listUserId: [String!]!, electionId: String!): Election!
}
